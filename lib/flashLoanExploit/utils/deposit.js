const fs = require('fs')
const crypto = require('crypto')
const snarkjs = require('snarkjs')
const circomlib = require('circomlib')
const bigInt = snarkjs.bigInt

const rbigint = (nbytes) => snarkjs.bigInt.leBuff2int(crypto.randomBytes(nbytes))
const pedersenHash = (data) => circomlib.babyJub.unpackPoint(circomlib.pedersenHash.hash(data))[0]
const toFixedHex = (number, length = 32) =>  '0x' + bigInt(number).toString(16).padStart(length * 2, '0')

const storeData = (data) => {
  path = "/workspace/build/notes.json"
  try {
    fs.writeFileSync(path, JSON.stringify(data))
  } catch (err) {
    console.error(err)
  }
}

function generateDeposit() {
  let deposit = {
    secret: rbigint(31),
    nullifier: rbigint(31),
  }
  const preimage = Buffer.concat([deposit.nullifier.leInt2Buff(31), deposit.secret.leInt2Buff(31)])
  deposit.commitment = pedersenHash(preimage)
  deposit.preimage = preimage
  return deposit
}
function toHex(number, length = 32) {
  //console.log("number: ", number)
  const str = number instanceof Buffer ? number.toString('hex') : bigInt(number).toString(16)
  return '0x' + str.padStart(length * 2, '0')
}

function getNoteString(deposit, token, amount, chainId) {
  const note = toHex(deposit.preimage, 62)
  return `avacash-${token}-${amount}-${chainId}-${note}`
}

module.exports = {
  generateDeposit,
  getNoteString,
  storeData,
}
